local ls = require "luasnip"
local s = ls.snippet
local sn = ls.snippet_node
local isn = ls.indent_snippet_node
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local c = ls.choice_node
local d = ls.dynamic_node
local r = ls.restore_node
local events = require "luasnip.util.events"
local ai = require "luasnip.nodes.absolute_indexer"
local extras = require "luasnip.extras"
local fmt = extras.fmt
local m = extras.m
local l = extras.l
local postfix = require "luasnip.extras.postfix".postfix

ls.add_snippets("all", {
  s("reqsn", {
    t({"package ssaicare"}),
    t({"", ""}),
    t({"", "import ("}),
    t({"", "	\"api-framework/commconst\""}),
    t({"", "	\"api-framework/httpservice\""}),
    t({"", "	\"fmt\""}),
    t({"", "	\"frameworkGo/logger\""}),
    t({"", "	\"frameworkGo/tools\""}),
    t({"", "	\"net/http\""}),
    t({"", "	\"userscribe/db\""}),
    t({"", "	\"userscribe/structs\""}),
    t({"", ""}),
    t({"", "	\"github.com/gin-gonic/gin\""}),
    t({"", ")", ""}),
    t("type "), 
    i(1, "name"), 
    t({"Req struct {", "  TimeStamp  int64  `json:\"timestamp\"`", "  SN string `json:\"device_sn\"`", ""}),
    t({"", "  // TODO: ", "  "}),
    i(2, {"content"}),
    t({"", "}"}),
    t({"", "", ""}),
    t({"func (req *"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({"Req) verify() commconst.HTTPErrorCode {", "  if len(req.SN) == 0 {", "    return commconst.HTTP_REQUEST_ERROR_PARAMETERS", "  }", "", "  return commconst.HTTP_REQUEST_OK"}),
    t({"", "}"}),
    t({"", "", ""}),
    t({"func (s *SSAICareService) PostMethod"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({"(c *gin.Context) {"}),
	  t({"", "  tag := \"SSAICareService.PostMethod"}),
    f(function(args) return args[1] end, { 1 }), 
    t({"\""}),
    t({"", "  resp := &httpservice.ResponseBase{Code: int(commconst.HTTP_REQUEST_ERROR_UNKNOWN)}"}),
	  t({"", "  defer func() { s.StringWithJson(c, http.StatusOK, resp) }()"}),
    t({"", ""}),
	  t({"", "  req := &"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({"Req{}"}),
	  t({"", "  if err := s.BindWithJson(c, &req); nil != err {"}),
	  t({"", "  	resp.Msg = fmt.Sprintf(\"bind json, err:%v\", err)"}),
	  t({"", "  	resp.Code = int(commconst.HTTP_REQUEST_ERROR_JSON_ILLEGAL)"}),
	  t({"", "  	logger.Error(\"%v %v\", tag, err)"}),
	  t({"", "  	return"}),
	  t({"", "  }"}),
    t({"", ""}),
	  t({"", "  logger.Info(\"%v start %v\", tag, tools.Print2JsonString(req))"}),
	  t({"", "  defer logger.Info(\"%v end %v\", tag, tools.Print2JsonString(req))"}),
    t({"", ""}),
	  t({"", "  if errCode := req.verify(); errCode != commconst.HTTP_REQUEST_OK {"}),
	  t({"", "  	resp.Code = int(errCode)"}),
	  t({"", "  	resp.Msg = errCode.String()"}),
	  t({"", "  	return"}),
	  t({"", "  }"}),
    t({"", ""}),
    t({"", "  // TODO: impl"}),
    t({"", ""}),
	  t({"", "  resp.Code = int(commconst.HTTP_REQUEST_OK)"}),
    t({"", "}"}),
  }),
  s("reqlt", {
    t({"package ssaicare"}),
    t({"", ""}),
    t({"", "import ("}),
    t({"", "	\"api-framework/commconst\""}),
    t({"", "	\"api-framework/httpservice\""}),
    t({"", "	\"fmt\""}),
    t({"", "	\"frameworkGo/logger\""}),
    t({"", "	\"frameworkGo/tools\""}),
    t({"", "	\"net/http\""}),
    t({"", "	\"userscribe/db\""}),
    t({"", "	\"userscribe/structs\""}),
    t({"", ""}),
    t({"", "	\"github.com/gin-gonic/gin\""}),
    t({"", ")", ""}),
    t("type "), 
    i(1, "name"), 
    t({"Req struct {", "  TimeStamp  int64  `json:\"timestamp\"`", "  LoginToken string `json:\"login_token\"`", ""}),
    t({"", "  // TODO: ", "  "}),
    i(2, {"content"}),
    t({"", "}"}),
    t({"", "", ""}),
    t({"func (req *"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({"Req) verify() commconst.HTTPErrorCode {", "  if len(req.LoginToken) == 0 {", "    return commconst.HTTP_REQUEST_ERROR_PARAMETERS", "  }", "", "  return commconst.HTTP_REQUEST_OK"}),
    t({"", "}"}),
    t({"", "", ""}),
    t({"func (s *SSAICareService) PostMethod"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({"(c *gin.Context) {"}),
	  t({"", "  tag := \"SSAICareService.PostMethod"}),
    f(function(args) return args[1] end, { 1 }), 
    t({"\""}),
    t({"", "  resp := &httpservice.ResponseBase{Code: int(commconst.HTTP_REQUEST_ERROR_UNKNOWN)}"}),
	  t({"", "  defer func() { s.StringWithJson(c, http.StatusOK, resp) }()"}),
    t({"", ""}),
	  t({"", "  req := &"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({"Req{}"}),
	  t({"", "  if err := s.BindWithJson(c, &req); nil != err {"}),
	  t({"", "  	resp.Msg = fmt.Sprintf(\"bind json, err:%v\", err)"}),
	  t({"", "  	resp.Code = int(commconst.HTTP_REQUEST_ERROR_JSON_ILLEGAL)"}),
	  t({"", "  	logger.Error(\"%v %v\", tag, err)"}),
	  t({"", "  	return"}),
	  t({"", "  }"}),
    t({"", ""}),
	  t({"", "  logger.Info(\"%v start %v\", tag, tools.Print2JsonString(req))"}),
	  t({"", "  defer logger.Info(\"%v end %v\", tag, tools.Print2JsonString(req))"}),
    t({"", ""}),
	  t({"", "  if errCode := req.verify(); errCode != commconst.HTTP_REQUEST_OK {"}),
	  t({"", "  	resp.Code = int(errCode)"}),
	  t({"", "  	resp.Msg = errCode.String()"}),
	  t({"", "  	return"}),
	  t({"", "  }"}),
    t({"", ""}),
	  t({"", "  loginToken, terr := structs.ParseCorpUserLoginToken(req.LoginToken)"}),
	  t({"", "  if terr != nil {"}),
	  t({"", "  	resp.Code = int(commconst.HTTP_REQUEST_ERROR_PARAMETERS)"}),
	  t({"", "  	resp.Msg = \"invalid login token\""}),
	  t({"", "  	return"}),
	  t({"", "  }"}),
    t({"", ""}),
	  t({"", "  dbConn := db.Mysql().Conn()"}),
	  t({"", "  if dbConn == nil {"}),
	  t({"", "  	resp.Code = int(commconst.HTTP_REQUEST_ERROR_DBERROR)"}),
	  t({"", "  	resp.Msg = commconst.HTTP_REQUEST_ERROR_DBERROR.String()"}),
	  t({"", "  	return"}),
	  t({"", "  }"}),
    t({"", ""}),
	  t({"", "  // CHECK USER INFO"}),
    t({"", "  _, uerr := structs.LoadCorpUserByUserID(dbConn, loginToken.CorpID, loginToken.UserID)"}),
    t({"", "  if uerr != nil {"}),
    t({"", "    resp.Code = int(commconst.HTTP_REQUEST_ERROR_DBERROR)"}),
    t({"", "    resp.Msg = commconst.HTTP_REQUEST_ERROR_DBERROR.String()"}),
    t({"", "    return"}),
    t({"", "  }"}),
    t({"", ""}),
    t({"", "  // TODO: impl"}),
    t({"", ""}),
	  t({"", "  resp.Code = int(commconst.HTTP_REQUEST_OK)"}),
    t({"", "}"}),
  }),
  s("struct", {
    t({"package structs"}),
    t({"", ""}),
    t({"", "import ("}),
    t({"", "	\"errors\""}),
    t({"", "	\"fmt\""}),
    t({"", "	\"frameworkGo/dbtime\""}),
    t({"", "	\"frameworkGo/logger\""}),
    t({"", "	\"gorm.io/gorm\""}),
    t({"", ")"}),
    t({"", ""}),
    t({"", "type "}),
    i(1, {"name"}),
    t({" struct {"}),
    t({"", "	ID             int64         `gorm:\"column:id;type:bigint(20) unsigned auto_increment;not null;primary_key;comment:'主键'\"` // 主键"}),
    t({"", "	Uid            int64         `gorm:\"column:uid;type:bigint(20);comment:'用户ID'\"`                                           // 用户ID"}),
    t({"", "  DeviceSN       string        `gorm:\"column:device_sn;type:varchar(64);not null;comment:'设备SN'\"`                           // SN"}),
    t({"", "	Mtime          int64         `gorm:\"column:mtime;type:bigint(20);not null;comment:'stamp'\"`                                 // stamp"}),
    t({"", "	CreatedAt      dbtime.DBTime `gorm:\"column:created_at;type:datetime\" json:\"created_at\"`"}),
    t({"", "	UpdatedAt      dbtime.DBTime `gorm:\"column:updated_at;type:datetime\" json:\"updated_at\"`"}),
    t({"", "}"}),
    t({"", "", "", ""}),
    t({"", "func Store(dbConn *gorm.DB, info *"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({") error {"}),
    t({"", "	if dbConn == nil {"}),
    t({"", "		return errors.New(\"invalid parameters\")"}),
    t({"", "	}"}),
    t({"", ""}),
    t({"", "	if info == nil {"}),
    t({"", "		return nil"}),
    t({"", "	}"}),
    t({"", ""}),
    t({"", "  tx := dbConn.Begin()"}),
    t({"", "  if tx == nil {"}),
    t({"", "		return fmt.Errorf(\"begin tx failed\")"}),
    t({"", "  }"}),
    t({"", ""}),
    t({"", "  if err := tx.Model(&"}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({"{}).Create(info).Error; err != nil {"}),
    t({"", "		tx.Rollback()"}),
    t({"", "		logger.Error(\"insert "}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({" info failed, err:%v\", err)"}),
    t({"", "		return err"}),
    t({"", "  }"}),
    t({"", ""}),
    t({"", "	if err := tx.Commit().Error; err != nil {"}),
    t({"", "		tx.Rollback()"}),
    t({"", "		logger.Error(\"insert "}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({" commit failed, err:%v\", err)"}),
    t({"", "		return err"}),
    t({"", "	}"}),
    t({"", "	logger.Info(\"insert "}),
    f(function(args)
      return args[1]
    end, { 1 }), 
    t({" done, code:%v, affected:%v\","}),
    t({"", "		info.SN,"}),
    t({"", "		tx.RowsAffected,"}),
    t({"", "	)"}),
    t({"", "	return nil"}),
    t({"", "}"}),
  }),
})

